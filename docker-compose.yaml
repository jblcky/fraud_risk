services:
  # --- 1. STORAGE ---
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_:/data
    restart: unless-stopped

  # --- 2. STREAMING ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    restart: unless-stopped

  # --- 3. SPARK PROCESSING ---
  spark-master:
    container_name: spark-master
    image: apache/spark:3.5.0
    environment:
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_WEBUI_PORT: 8080
      SPARK_DAEMON_MEMORY: 1g
      # MinIO credentials (for S3A)
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark_apps:/opt/spark_apps
    command: >
      bash -c "
        /opt/spark/sbin/start-master.sh &&
        tail -f /opt/spark/logs/spark--org.apache.spark.deploy.master.Master-*.out
      "
    restart: unless-stopped

  spark-worker:
    container_name: spark-worker
    image: apache/spark:3.5.0
    depends_on:
      - spark-master
    environment:
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      # MinIO credentials
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
    volumes:
      - ./spark_apps:/opt/spark_apps
    command: >
      bash -c "
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 &&
        tail -f /opt/spark/logs/spark--org.apache.spark.deploy.worker.Worker-*.out
      "
    restart: unless-stopped

  # --- 4. ORCHESTRATION ---
  airflow-db:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      airflow-db:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080
    ports:
      - "8088:8080"
    volumes:
      - ./dags:/opt/airflow/dags
    command: >
      bash -c "
        airflow db migrate &&
        if ! airflow users list 2>/dev/null | grep -q 'admin'; then
          airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
        fi &&
        airflow webserver
      "
    restart: unless-stopped

  # --- 5. MONITORING ---
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.4
    ports:
      - "3000:3000"
    volumes:
      - grafana_:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    restart: unless-stopped

  minio-init:
    image: curlimages/curl:latest
    depends_on:
      minio:
        condition: service_started
    command: >
      /bin/sh -c "
        sleep 5 &&
        curl -X PUT http://minio:9000/mlflow-bucket -u minio:minio123
      "
    restart: "no"

  # --- 7. MLFLOW ---
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      MLFLOW_ARTIFACT_ROOT: s3://mlflow-bucket/
    depends_on:
      minio-init:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  minio_:
  airflow_db:
  prometheus_:
  grafana_:
